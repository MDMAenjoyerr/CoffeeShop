import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ParseMode
from aiogram.utils import executor

API_TOKEN = '6842731492:AAFxcqwAxWMVlk31OjShWgQFRUIZ-txioBI'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üí¨–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥üí¨"))
menu.add(KeyboardButton("üìñ–ú–µ–Ω—éüìñ"))
menu.add(KeyboardButton("üåç–ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏?üåç"))


# –°–ø–∏—Å–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π –∫–æ—Ñ–µ–µ–Ω
locations = [
    {"title": "–ö–æ—Ñ–µ–π–Ω—è 1", "address": "–¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä", "apartment": "21"},
    {"title": "–ö–æ—Ñ–µ–π–Ω—è 2", "address": "–£–ª–∏—Ü–∞ –ú–∞–ª–ª–∞—è –±—Ä–æ–Ω–Ω–∞—è", "apartment": "21"},
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π
locations_keyboard = InlineKeyboardMarkup()
for location in locations:
    locations_keyboard.add(
        InlineKeyboardButton(text=location["title"], callback_data=f"location:{location['address']}:{location['apartment']}"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏: CoffeeShop, —á—Ç–æ—é–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∏–∑—É‚¨áÔ∏è.", reply_markup=menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(lambda message: message.text == "üí¨–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥üí¨", content_types=types.ContentTypes.TEXT)
async def process_help_command(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/menu - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", reply_markup=menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
@dp.message_handler(lambda message: message.text == "üìñ–ú–µ–Ω—éüìñ", content_types=types.ContentTypes.TEXT)
async def process_menu_command(message: types.Message):
    await message.answer("–ú–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏:\n1. –≠—Å–ø—Ä–µ—Å—Å–æ - ‚Ç¨2\n2. –õ–∞—Ç—Ç–µ - ‚Ç¨2.5\n3. –ö–∞–ø—É—á–∏–Ω–æ - ‚Ç¨2\n4. –†–ê–§ –ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π - ‚Ç¨4.5\n5. –ö—Ä—É–∞—Å–∞–Ω - ‚Ç¨1.25\n6. –î–æ–Ω–∞—Ç –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ - ‚Ç¨1.5pcs", reply_markup=menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏?"
@dp.message_handler(lambda message: message.text == "üåç–ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏?üåç", content_types=types.ContentTypes.TEXT)
async def process_location_button(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ—Ñ–µ–π–Ω—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=locations_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏
@dp.callback_query_handler(lambda c: c.data.startswith('location'))
async def process_location_button(callback_query: types.CallbackQuery):
    _, address, apartment = callback_query.data.split(":")
    location_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ñ–µ–π–Ω—é :\n{address} {apartment}"
    await bot.send_message(callback_query.from_user.id, location_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)